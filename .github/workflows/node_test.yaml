name: Node Test

on:
  workflow_call:
    inputs:
      env-vars:
        description: |
          This input allows arbitrary environment variables to be passed into this
          workflow (called workflows do not inherit the "env" context). Provide this
          input as a string formatted as a space-separated list of key-value pairs
          (e.g., "FOO=bar BAZ=qux"). All env-vars are masked before usage. At this
          time, neither keys nor values may contain spaces, but support for spaces in
          values may be added in the future.
        required: false
        type: string
      test-script:
        description: |
          The test script to run (e.g., "test:ci" will result in `npm run test:ci`).
        default: "test:ci"
        required: false
        type: string
      node-version:
        description: |
          The NodeJS version to use; if an explicit value is not provided, this
          workflow will attempt to read "engines.node" from the project's package.json
          if one is present in order to determine the NodeJS version to use. If a node
          version is not specified in the file, node v18.16.1 will be used as a fallback.
        default: "18.16.1"
        required: false
        type: string
      should-update-codecov:
        description: "Boolean indicating whether CodeCov should be updated"
        default: true
        required: false
        type: boolean
    secrets:
      CODECOV_TOKEN:
        description: "CodeCov token for private repo code coverage reports"
        required: false

defaults:
  run:
    shell: bash

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      did-tests-succeed: ${{ steps.run-tests.outputs.did-tests-succeed }} # output provides an explicit named indicator
    steps:
      - uses: actions/checkout@v3
      - id: get-node-version
        run: |
          NODE_VERSION=

          if [ -n ${{ inputs.node-version }} ]; then
            NODE_VERSION=${{ inputs.node-version }}
          elif [ -f ./package.json ]; then

            # jq will output 'null' if .engines.node isn't present
            ENGINE_NODE="$( jq '.engines.node' ../package.json )"

            # If a value is present and is not 'null', remove any quotation marks
            # and/or semver chars and use the resultant value for the node version.

            if [[ -n "$ENGINE_NODE" && "$ENGINE_NODE" != 'null' ]]; then
              NODE_VERSION="$( sed -r 's/["^~<>= ]//g' <<< "$ENGINE_NODE" )"
            fi
          fi

          # Final fallback value if still unset
          if [ -z "$NODE_VERSION" ]; then
            NODE_VERSION='18.16.1'
          fi

          echo "node-version=$NODE_VERSION" >> $GITHUB_OUTPUT

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ steps.get-node-version.outputs.node-version }}

      - name: Run Tests
        id: run-tests
        run: |
          # PARSE, MASK, AND EXPORT ENV VARS
          for env_var_kv_pair in ${{ inputs.env-vars }}; do
            read -r key value <<< "${env_var_kv_pair/=/ }"
            echo "::add-mask::$key"
            export $key="$value"
          done

          npm ci

          if npm run ${{ inputs.test-script }} ; then
            echo "did-tests-succeed=true" >> $GITHUB_OUTPUT
          else
            echo "did-tests-succeed=false" >> $GITHUB_OUTPUT
          fi

          # Ascertain whether CodeCov should/can be updated.
          # SHOULD_UPDATE_CODECOV is true by default, with 2 false conditions:
          #   1. If the repo is private and secret.CODECOV_TOKEN was not provided.
          #   2. If input.should-update-codecov was explicitly set to false.

          SHOULD_UPDATE_CODECOV=true

          if [[ ${{ github.event.repository.private }} == true && -z ${{ secrets.CODECOV_TOKEN }} ]]; then
            SHOULD_UPDATE_CODECOV=false
          fi

          if [[ ${{ inputs.should-update-codecov }} == false ]]; then
            SHOULD_UPDATE_CODECOV=false
          fi

          echo "should-update-codecov=$SHOULD_UPDATE_CODECOV" >> $GITHUB_OUTPUT

      - name: Update GitHub Commit Status
        run: |
          if [ ${{ steps.run-tests.outputs.did-tests-succeed }} == true ]; then
            commit_status_state='success'
            description='Tests passed'
          else
            commit_status_state='failure'
            description='Tests failed'
          fi

          curl --request POST \
            --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
            --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            --header 'content-type: application/json' \
            --data "{
              \"context\": \"tests\",
              \"state\": \"$commit_status_state\",
              \"description\": \"$description\",
              \"target_url\": \"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\"
            }"

      - name: Update CodeCov
        if: ${{ steps.run-tests.outputs.should-update-codecov }} == true
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # Note: "token" is not required for public repos
          directory: ./coverage
          verbose: true
