name: Node Test

# Runs tests, updates PRs with test/coverage results, and optionally updates CodeCov.

on:
  workflow_call:
    inputs:
      env-vars:
        description: |
          Arbitrary environment variables for the test env, provided as a
          space-separated list of key-value pairs (e.g., "FOO=bar BAZ=qux").
          All env-vars are masked before usage.
        required: false
        type: string
      test-script:
        description: |
          The test script to run (e.g., "test:ci" will result in `npm run test:ci`).
        default: "test:ci"
        required: false
        type: string
      node-version:
        description: |
          The NodeJS version to use. If this input is not provided, this defaults
          to the value of "engines.node" in package.json. If that value is not
          provided, the latest LTS version of node will be used as a fallback.
        required: false
        type: string
      should-upload-coverage-artifacts:
        description: |
          Whether coverage artifacts should be uploaded. The relevant action looks
          for coverage reports generated by your test script in a directory named
          "coverage" in the repo root, and if found, will upload the directory as
          an artifact. If no coverage reports are found, the action is skipped.
        default: true
        required: false
        type: boolean
      coverage-artifacts-name:
        description: |
          The name of the coverage artifacts provided to actions/upload-artifact.
        default: "coverage-reports"
        required: false
        type: string
      should-update-codecov:
        description: "Whether CodeCov should be updated"
        default: true
        required: false
        type: boolean

    secrets:
      CODECOV_TOKEN:
        description: "CodeCov token for private repo code coverage reports"
        required: false
      env-vars:
        description: |
          Arbitrary environment variables for the test env, provided as a
          space-separated list of key-value pairs (e.g., "FOO=bar BAZ=qux").
          All env-vars are masked before usage.
        required: false

    outputs:
      did-tests-succeed:
        description: "Boolean indicating whether tests succeeded"
        value: ${{ jobs.test.outputs.did-tests-succeed }}
      coverage-artifacts-name:
        description: "The name of the coverage artifacts provided to actions/upload-artifact"
        value: ${{ inputs.coverage-artifacts-name }}

defaults:
  run:
    shell: bash

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      did-tests-succeed: ${{ steps.run-tests.outputs.did-tests-succeed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Ascertain Node Version
        id: get-node-version
        run: |
          NODE_VERSION=

          if [ -n "${{ inputs.node-version }}" ]; then
            NODE_VERSION=${{ inputs.node-version }}
          elif [ -f ./package.json ]; then

            # jq will output 'null' if .engines.node isn't present
            ENGINE_NODE="$( jq '.engines.node' ./package.json )"

            # If a value is present and is not 'null', remove any quotation marks
            # and/or semver chars and use the resultant value for the node version.

            if [[ -n "$ENGINE_NODE" && "$ENGINE_NODE" != 'null' ]]; then
              NODE_VERSION="$( sed -r 's/["^~<>= ]//g' <<< "$ENGINE_NODE" )"
            fi
          fi

          # Final fallback value if still unset
          if [ -z "$NODE_VERSION" ]; then
            NODE_VERSION='lts/*'
          fi

          echo "node-version=$NODE_VERSION" >> $GITHUB_OUTPUT

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ steps.get-node-version.outputs.node-version }}

      - name: Run Tests
        id: run-tests
        run: |
          # PARSE, MASK, AND EXPORT ENV VARS
          for env_var_kv_pair in ${{ inputs.env-vars }} ${{ secrets.env-vars }}; do
            read -r key value <<< "${env_var_kv_pair/=/ }"
            echo "::add-mask::$key"
            export $key="$value"
          done

          npm ci --include=dev

          if npm run ${{ inputs.test-script }} ; then
            echo "did-tests-succeed=true" >> $GITHUB_OUTPUT
          else
            echo "did-tests-succeed=false" >> $GITHUB_OUTPUT
          fi

          # Ascertain whether CodeCov should/can be updated.
          # SHOULD_UPDATE_CODECOV is true by default, with 2 false conditions:
          #   1. If the repo is private and secret.CODECOV_TOKEN was not provided.
          #   2. If input.should-update-codecov was explicitly set to false.

          SHOULD_UPDATE_CODECOV=true

          if [[ ${{ github.event.repository.private }} == true && -z ${{ secrets.CODECOV_TOKEN }} ]]; then
            SHOULD_UPDATE_CODECOV=false
          fi

          if [[ ${{ inputs.should-update-codecov }} == false ]]; then
            SHOULD_UPDATE_CODECOV=false
          fi

          echo "should-update-codecov=$SHOULD_UPDATE_CODECOV" >> $GITHUB_OUTPUT

      - name: Update GitHub Commit Status
        run: |
          if [ ${{ steps.run-tests.outputs.did-tests-succeed }} == true ]; then
            commit_status_state='success'
            description='Tests passed'
          else
            commit_status_state='failure'
            description='Tests failed'
          fi

          curl --request POST \
            --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
            --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            --header 'content-type: application/json' \
            --data "{
              \"context\": \"tests\",
              \"state\": \"$commit_status_state\",
              \"description\": \"$description\",
              \"target_url\": \"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\"
            }"

      - name: Upload Coverage Artifacts
        if: ${{ inputs.should-upload-coverage-artifacts }} == true
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.coverage-artifacts-name }}
          path: coverage
          if-no-files-found: ignore

      - name: Update CodeCov
        if: ${{ steps.run-tests.outputs.should-update-codecov }} == true
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # Note: "token" is not required for public repos
          directory: ./coverage
          verbose: true
