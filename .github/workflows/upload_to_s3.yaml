name: Upload Build to S3

# Runs `npm run build` and uploads the resultant package to an S3 bucket.

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      env-vars:
        description: |
          Arbitrary environment variables set for the build. Provide this input
          as a string formatted as a space-separated list of key-value pairs
          (e.g., "FOO=bar BAZ=qux"). All env-vars are masked before usage.
        required: false
        type: string
      node-version:
        description: |
          The NodeJS version to use. If this input is not provided, this workflow
          will default to the value of "engines.node" in the package.json. If that
          value is not provided, node "v18.16.1" will be used as a fallback.
        required: false
        default: "18.16.1"
        type: string
      s3-sync-command-params:
        description: |
          The options to use with the `aws s3 sync` operation. sync command docs:
          https://awscli.amazonaws.com/v2/documentation/api/latest/reference/s3/sync.html#options
        required: false
        default: "--acl bucket-owner-full-control --sse AES256"
        type: string

    secrets:
      OIDC_GITHUB_ROLE_ARN:
        description: "The ARN of the AWS IAM Role for the GitHub OpenID Connect provider"
        required: true
      S3_BUCKET_REGION:
        description: "The AWS region in which the target S3 bucket is located."
        required: true
      S3_UPLOAD_PATH:
        description: |
          Where to upload the resultant build. This must include the bucket name, and
          may optionally contain a subdirectory path (e.g., "my_foo_bucket/production").
          Do NOT end with a trailing slash.
        required: true
      env-vars:
        description: |
          Arbitrary environment variables set for the build. Provide this secret
          as a string formatted as a space-separated list of key-value pairs
          (e.g., "FOO=bar BAZ=qux"). All env-vars are masked before usage.
        required: false

defaults:
  run:
    shell: bash

jobs:
  build_and_upload:
    runs-on: ubuntu-latest

    # permissions required to use aws-actions/configure-aws-credentials@v1
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v3

      - id: get-node-version
        run: |
          NODE_VERSION=

          if [ -n ${{ inputs.node-version }} ]; then
            NODE_VERSION=${{ inputs.node-version }}
          elif [ -f ./package.json ]; then

            # jq will output 'null' if .engines.node isn't present
            ENGINE_NODE="$( jq '.engines.node' ../package.json )"

            # If a value is present and is not 'null', remove any quotation marks
            # and/or semver chars and use the resultant value for the node version.

            if [[ -n "$ENGINE_NODE" && "$ENGINE_NODE" != 'null' ]]; then
              NODE_VERSION="$( sed -r 's/["^~<>= ]//g' <<< "$ENGINE_NODE" )"
            fi
          fi

          # Final fallback value if still unset
          if [ -z "$NODE_VERSION" ]; then
            NODE_VERSION='18.16.1'
          fi

          echo "node-version=$NODE_VERSION" >> $GITHUB_OUTPUT

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ steps.get-node-version.outputs.node-version }}

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.OIDC_GITHUB_ROLE_ARN }}
          aws-region: ${{ secrets.S3_BUCKET_REGION }}

      - name: Build & Upload
        run: |
          # PARSE, MASK, AND EXPORT ENV VARS
          for env_var_kv_pair in ${{ inputs.env-vars }} ${{ secrets.env-vars }}; do
            read -r key value <<< "${env_var_kv_pair/=/ }"
            echo "::add-mask::$key"
            export $key="$value"
          done

          npm ci

          npm run build

          aws s3 sync ./build \
            "s3://${{ secrets.S3_UPLOAD_PATH }}" \
            $( echo ${{ inputs.s3-sync-command-params }} )
